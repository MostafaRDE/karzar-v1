const fs = require('fs');
const path = require('path');
const LRU = require('lru-cache');
const express = require('express');
const compression = require('compression');
const microcache = require('route-cache');
const resolve = file => path.resolve(__dirname, file);
const {createBundleRenderer} = require('vue-server-renderer');
const helmet = require('helmet');
const bodyParser = require('body-parser');
const csurf = require('csurf');
const cookieParser = require('cookie-parser');
const mongoose = require("mongoose");
const Grid = require('gridfs-stream');
const userAgent = require('express-useragent');
const http = require('http');
const socket = require('socket.io');
const cors = require('cors');


// env file initial
require('dotenv').config({path: path.resolve(process.cwd(), '.env.server')});

// create app express
const app = express();
const server = http.createServer(app);
const io = socket(server);

app.use(cors());

// variable setter for app
const isProd = process.env.NODE_ENV === 'production';
const useMicroCache = process.env.MICRO_CACHE !== 'false';
let renderer;
let readyPromise;
const templatePath = resolve('./src/index.template.html');
const port = process.env.PORT || 8080;
const serve = (path, cache) => express.static(resolve(path), {
    maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
});
if (isProd) {
    // In production: create server renderer using template and built server bundle.
    // The server bundle is generated by vue-ssr-webpack-plugin.
    const template = fs.readFileSync(templatePath, 'utf-8');
    const bundle = require('./dist/vue-ssr-server-bundle.json');
    // The client manifests are optional, but it allows the renderer
    // to automatically infer preload/prefetch links and directly add <script>
    // tags for any async chunks used during render, avoiding waterfall requests.
    const clientManifest = require('./dist/vue-ssr-client-manifest.json');
    renderer = createRenderer(bundle, {
        template,
        clientManifest
    })
} else {
    // In development: setup the dev server with watch and hot-reload,
    // and create a new renderer on bundle / index template update.
    readyPromise = require('./build/setup-dev-server')(
        app,
        templatePath,
        (bundle, options) => {
            renderer = createRenderer(bundle, options)
        }
    )
}

// connect mongoose
mongoose.connect(process.env.MONGO_URL_DB + '/' + process.env.MONGO_DB_NAME,
    {
        keepAlive: 1,
        useUnifiedTopology: true,
        useNewUrlParser: true,
    }
)
    .then(() => console.log("Mongo DB is connect"))
    .catch(err => {
        console.log(`DB connect error ${err.message}`);
    });

let grid;

grid = Grid(mongoose.connection, mongoose.mongo);
grid.collection('uploads');


// app use application
app.use(compression({threshold: 0}));
app.use('/dist', serve('./dist', true));
app.use('/public', serve('./public', true));
app.use('/', serve('./root', true));
app.use('/uploads', serve('./uploads', true));
app.use('/manifest.json', serve('./manifest.json', true));
app.use('/service-worker.js', serve('./dist/service-worker.js'));
app.use(helmet());
// app.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl))
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended: false}));
app.use(cookieParser());
app.use(userAgent.express());


// rate limit import
require('./server/util/rateLimit')(app);

// express sessions import
require("./server/util/auth/express-session")(app);

// i18n config import
require('./server/util/i18n/i18n')(app);

// Router Api Import
require('./server/router')(app);

// Router Getter
app.get('*', isProd ? render : (req, res) => {
    readyPromise.then(() => render(req, res))
});


server.listen(port, () => {
    console.log(`server started at localhost:${port}`)
});

function createRenderer(bundle, options) {
    return createBundleRenderer(bundle, Object.assign(options, {
        // for component caching
        cache: LRU({
            max: 1000,
            maxAge: 1000 * 60 * 15
        }),
        // this is only needed when vue-server-renderer is npm-linked
        basedir: resolve('./dist'),
        // inject: false,
        renderStyles: () => {

        },
        renderState: () => {

        },
        renderScripts: () =>{

        },
        shouldPreload: (file, type) => {
            // https://fetch.spec.whatwg.org/#concept-request-destination
            // console.log(file,type);
            if (type === 'script' || type === 'style') {
                return true
            }

            if (type === 'font') {
                return /\.woff2$/.test(file)
            }
            if (type === 'image') {}
        },
        shouldPrefetch: (file, type) => {
            return false;
        },
        // recommended for performance
        runInNewContext: false
    }))
}

function render(req, res) {
    const s = Date.now();

    res.setHeader("Content-Type", "text/html");

    const handleError = err => {
        if (err.url) {
            res.redirect(err.url)
        } else if (err.code === 404) {
            res.status(404).send('404 | Page Not Found')
        } else {
            // Render Error Page or Redirect
            res.status(500).send('500 | Internal Server Error')
            console.error(`error during render : ${req.url}`)
            console.error(err.stack)
        }
    };

    const context = {
        title: null, // default title
        url: req.url,
        is_auth: req.isAuthenticated()
    };

    renderer.renderToString(context, (err, html) => {
        if (err) {
            return handleError(err)
        }
        res.send(html);

        if (!isProd) {
            console.log(`whole request: ${Date.now() - s}ms`)
        }
    })
}
